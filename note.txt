https://hub.docker.com/_/node

important command 
Add your user to the docker group:
sudo usermod -aG docker $USER

Log out and log back in for the changes to take effect.
Verify that your user is now part of the docker group:
groups $USER

You can restart the Docker service using the following command:
sudo systemctl restart docker

Since your user is already part of the docker group and you are 
still encountering the 
permission denied error, 
you might need to ensure 
that your current shell 
session recognizes the 
group membership change. 
You can do this by logging out and 
logging back in, or by running the following 
command to refresh your group membership 
without logging out:

newgrp docker
docker build .

----
docker build . 
docker image ls 
delete specific image: docker image rm  50332b4239f2
image name: docker build -t node-app-image .

Run: docker run -p 5000:5000 -d --name <container-name> <image name>
$ docker run -p 5000:5000 -d --name node-app node-app-image
$ docker ps
$ docker ps -a 
$ kill container: docker rm node-app -f 
$ To see file system: docker exec -it node-app bash 
root@9207cde7ecba:/app# ls
exit 

Docker Volume 
Volume(bind mount)
docker run -v pathtofolderonlocation:pathtofolderoncontainer -p 5000:5000 -d --name node-app node-app-image
docker run -v /home/azraf-sami/Documents/learn-docker/:/app -p 5000:5000 -d --name node-app node-app-image
docker run -v $(pwd):/app -p 5000:5000 -d --name node-app node-app-image
docker run -v $(pwd):/app -v /app/node_modules -p 5000:5000 -d --name node-app node-app-image

Read only bind mount(can't add file from docker container)
docker run -v $(pwd):/app:ro -v /app/node_modules -p 5000:5000 -d --name node-app node-app-image
docker run -v $(pwd):/app:ro -v /app/node_modules --env PORT=4000 -p 5000:4000 -d --name node-app node-app-image

azraf-sami@azraf-sami:~/Documents/learn-docker$ docker exec -it node-app bash 
root@55fdf1a4d78c:/app# printenv

docker run -v $(pwd):/app:ro -v /app/node_modules --env-file ./.env -p 5000:3000 -d --name node-app node-app-image

docker logs node-app 

docker volume ls 

docker volume prune 

Delete also volume 
docker rm node-app -fv 

docker compose 
sudo apt install docker-compose
docker-compose up -d
docker-compose down -v
docker-compose up -d --build 

The error KeyError: 'ContainerConfig' in Docker Compose is likely caused by an issue with the container image configuration. Here are a few steps to resolve it:

1. Restart Docker and Prune System
Run the following commands to restart Docker and clean up unused resources:
sudo systemctl restart docker
docker system prune -a -f

Seperate commands for production and development 
don't use npm in docker? another layer 

docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d 
docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v 
// No bind mount 
docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.prod.yml up -d 
docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.prod.yml down -v 
// no bind, so any change, need to force build 
docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.prod.yml up -d --build

docker exec -it learn-docker_mongo_1 bash
root@16bf9fafa138:/# mongosh -u "root" -p "example"

-----
azraf-sami@azraf-sami:~/Documents/learn-docker$ docker exec -it  learn-docker_mongo_1 bash
root@16bf9fafa138:/# monosh -u "root" -p "example"
bash: monosh: command not found
root@16bf9fafa138:/# mongosh -u "root" -p "example"
Current Mongosh Log ID: 67e4d9bfde66b1cb1a6b140a
Connecting to:          mongodb://<credentials>@127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.4.2
Using MongoDB:          8.0.6
Using Mongosh:          2.4.2

For mongosh info see: https://www.mongodb.com/docs/mongodb-shell/

------
   The server generated these startup warnings when booting
   2025-03-26T14:51:58.785+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem
   2025-03-26T14:51:59.658+00:00: For customers running the current memory allocator, we suggest changing the contents of the following sysfsFile
   2025-03-26T14:51:59.658+00:00: For customers running the current memory allocator, we suggest changing the contents of the following sysfsFile
   2025-03-26T14:51:59.659+00:00: We suggest setting the contents of sysfsFile to 0.
   2025-03-26T14:51:59.659+00:00: vm.max_map_count is too low
   2025-03-26T14:51:59.659+00:00: We suggest setting swappiness to 0 or 1, as swapping can cause performance problems.
------

test> show dbs
admin   100.00 KiB
config   48.00 KiB
local    72.00 KiB
test> use myDB
switched to db myDB
myDB> db.books.insert({"name": "NTM"})
DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.
{
  acknowledged: true,
  insertedIds: { '0': ObjectId('67e4da37de66b1cb1a6b140b') }
}
myDB> db.books.find()
[ { _id: ObjectId('67e4da37de66b1cb1a6b140b'), name: 'NTM' } ]
myDB> show dbs
admin   100.00 KiB
config   48.00 KiB
local    72.00 KiB
myDB     40.00 KiB
myDB> exit
root@16bf9fafa138:/# exit 
exit
azraf-sami@azraf-sami:~/Documents/learn-docker$ 
-------

docker exec -it  learn-docker_mongo_1 mongosh -u "root" -p "example"

To store all db data even after container is deleted 
create new named volume 
To delete unused volume: 
azraf-sami@azraf-sami:~/Documents/learn-docker$ docker volume ls
DRIVER    VOLUME NAME
local     2f751b31bf53f62771d892043d4fdee0da0f16039313c0eb438d01d3eab98f17
local     7a03da4062b8562f19365aa65b7c81ff08722a6999614614670e45489473d4e0
local     67458f41eefa1ee09e9513e2abc7c4a15522659ff3ba0d4b36543c07e0ae31d5
local     a5b754f38d80f777815fd65f60bc44c0ca4baa774aad6205fd79ee8b9370f21d
local     f4fd69af09cb3e059d7a76c13846d77926099b3931c1f6da404d7df489edc79a
local     f5bc874edc288d7e27227818d0afc35ca20d7c87e08631136aea3e9f5140d3c4
azraf-sami@azraf-sami:~/Documents/learn-docker$ docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v
Stopping learn-docker_node-app_1 ... done
Stopping learn-docker_mongo_1    ... done
Removing learn-docker_node-app_1 ... done
Removing learn-docker_mongo_1    ... done
Removing network learn-docker_default
Removing volume learn-docker_mongo-db
WARNING: Volume learn-docker_mongo-db not found.
azraf-sami@azraf-sami:~/Documents/learn-docker$ docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
Creating network "learn-docker_default" with the default driver
Creating volume "learn-docker_mongo-db" with default driver
Creating learn-docker_node-app_1 ... done
Creating learn-docker_mongo_1    ... done
azraf-sami@azraf-sami:~/Documents/learn-docker$ docker ps
CONTAINER ID   IMAGE                   COMMAND                  CREATED         STATUS         PORTS                                         NAMES
cff5bd6ac5b1   learn-docker_node-app   "docker-entrypoint.s…"   6 seconds ago   Up 5 seconds   0.0.0.0:3000->3000/tcp, [::]:3000->3000/tcp   learn-docker_node-app_1
c425c70c3624   mongo                   "docker-entrypoint.s…"   6 seconds ago   Up 5 seconds   27017/tcp                                     learn-docker_mongo_1
azraf-sami@azraf-sami:~/Documents/learn-docker$ docker volume ls
DRIVER    VOLUME NAME
local     5d31691e84a67a11fc76a4c4c8ff7ecb2a0b74a55cb03c07df40aa622545e7b3
local     7a03da4062b8562f19365aa65b7c81ff08722a6999614614670e45489473d4e0
local     7ac101d0124ae98ac89ab7a246623cca833330780dcce8a5e8b8f0e7d6e17fa0
local     67458f41eefa1ee09e9513e2abc7c4a15522659ff3ba0d4b36543c07e0ae31d5
local     f4fd69af09cb3e059d7a76c13846d77926099b3931c1f6da404d7df489edc79a
local     learn-docker_mongo-db
azraf-sami@azraf-sami:~/Documents/learn-docker$ docker volume prune
WARNING! This will remove anonymous local volumes not used by at least one container.
Are you sure you want to continue? [y/N] u
azraf-sami@azraf-sami:~/Documents/learn-docker$ docker volume prune
WARNING! This will remove anonymous local volumes not used by at least one container.
Are you sure you want to continue? [y/N] y
Deleted Volumes:
7a03da4062b8562f19365aa65b7c81ff08722a6999614614670e45489473d4e0
f4fd69af09cb3e059d7a76c13846d77926099b3931c1f6da404d7df489edc79a
67458f41eefa1ee09e9513e2abc7c4a15522659ff3ba0d4b36543c07e0ae31d5

Total reclaimed space: 9.518MB
azraf-sami@azraf-sami:~/Documents/learn-docker$ docker volume ls
DRIVER    VOLUME NAME
local     5d31691e84a67a11fc76a4c4c8ff7ecb2a0b74a55cb03c07df40aa622545e7b3
local     7ac101d0124ae98ac89ab7a246623cca833330780dcce8a5e8b8f0e7d6e17fa0
local     learn-docker_mongo-db
azraf-sami@azraf-sami:~/Documents/learn-docker$ 

